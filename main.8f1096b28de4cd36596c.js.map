{"version":3,"sources":["webpack:///./js/task_01.js","webpack:///./js/task_02.js","webpack:///./js/task_03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAGMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GAGjBC,YAAW,WAETD,EAAQF,KACPA,OAIHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCChBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GAInBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAO9DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAG7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,G,8BClBpC,IAIQe,EAAkB,SAACC,EAAaC,EAAWC,GAC/C,IAL+BC,EAAKC,EAK9BzB,GALyBwB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpDpB,YAAW,WACUsB,KAAKE,SAAW,GAGjCN,EAAUD,EAAYQ,GAAI7B,GAE1BuB,EAAQF,EAAYQ,MAErB7B,IAGC8B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIvB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAIFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.8f1096b28de4cd36596c.js","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n    return new Promise(resolve => {\r\n      \r\n      \r\n      setTimeout(() => {\r\n        \r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n  };\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n    resolve(updatedUsers);\r\n    });\r\n}\r\n\r\n\r\n const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n \r\n toggleUserState(users, 'Mango').then(logger);\r\n toggleUserState(users, 'Lux').then(logger);\r\n","// Перепиши функцию makeTransaction() так,\r\n// чтобы она не использовала callback - функции onSuccess\r\n// и onError, а принимала всего один параметр transaction и\r\n// возвращала промис.\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction, onSuccess, onError) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n  \r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n  \r\n      if (canProcess) {\r\n        onSuccess(transaction.id, delay);\r\n      } else {\r\n        onError(transaction.id);\r\n      }\r\n    }, delay);\r\n  };\r\n  \r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  \r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  "],"sourceRoot":""}